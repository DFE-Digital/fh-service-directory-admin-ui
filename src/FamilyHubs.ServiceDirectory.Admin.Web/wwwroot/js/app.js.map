{"version":3,"sources":["tmp/js/app.js"],"names":["fhgov","this","init","restoreConditionalInputs","enhanceAccessibleAutocomplete","element","document","querySelector","HTMLElement","click","modelLaOrganisationName","getElementById","accessibleAutocomplete","enhanceSelectElement","defaultValue","value","name","selectElement","modelVcsOrganisationName","setupLanguageAutocompleteWhenAddAnother","languageSelects","querySelectorAll","forEach","select","MutationObserver","mutationsList","observer","childListMutation","some","mutation","type","addedNodes","length","attributesMutation","attributeName","targetElement","target","tagName","toLowerCase","getAttribute","console","log","id","input","replace","addGovUkClasses","classList","contains","observe","childList","subtree","attributes","errorState","add","window","addEventListener"],"mappings":"AAAA,SAASA,QACLC,KAAKC,KAAO,WACRC,IACAC,GACR,EACI,IAAID,EAA2B,WAC3B,MAAME,EAAUC,SAASC,cAAc,6BACnCF,aAAmBG,aACnBH,EAAQI,OAEpB,EACQL,EAAgC,WAEhC,MAAMM,EAA0BJ,SAASK,eAAe,2BACpDD,GACAE,uBAAuBC,qBAAqB,CACxCC,aAAcJ,EAAwBK,MACtCC,KAAM,qBACNC,cAAeX,SAASC,cAAc,yBAI9C,MAAMW,EAA2BZ,SAASK,eAAe,4BACrDO,GACAN,uBAAuBC,qBAAqB,CACxCC,aAAcI,EAAyBH,MACvCC,KAAM,sBACNC,cAAeX,SAASC,cAAc,yBAGtD,CACA,CAKA,SAASY,wCAAwCd,GAC7C,KAAMA,aAAmBG,aACrB,OAEJ,MAAMY,EAAkBf,EAAQgB,iBAAiB,2BACjDD,EAAgBE,SAAQ,SAAUC,GAC9BX,uBAAuBC,qBAAqB,CACxCG,KAAM,eACNF,aAAc,GACdG,cAAeM,GAE3B,IAYwB,IAAIC,kBAAiB,CAACC,EAAeC,KACrD,MAAMC,EAAoBF,EAAcG,MAAKC,GAA8B,cAAlBA,EAASC,MAAwBD,EAASE,WAAWC,OAAS,IACjHC,EAAqBR,EAAcG,MAAKC,IAC1C,GAAsB,eAAlBA,EAASC,MAAoD,UAA3BD,EAASK,cAA2B,CACtE,MAAMC,EAAgBN,EAASO,OAC/B,MAA+C,UAAxCD,EAAcE,QAAQC,eAAoE,SAAvCH,EAAcI,aAAa,OACrG,CACY,OAAO,CAAK,IAEZZ,GACAa,QAAQC,IAAI,qBAEZR,GACAO,QAAQC,IAAI,uBAEZd,GAAqBM,IAErBb,EAAgBE,SAAQ,SAAUC,GAC9BiB,QAAQC,IAAIlB,EAAOmB,IACnB,MAAMC,EAAQrC,SAASK,eAAeY,EAAOmB,GAAGE,QAAQ,UAAW,KAEnE,GADAJ,QAAQC,IAAIE,IACPA,EAED,YADAH,QAAQC,IAAI,6BAIhBI,gBAAgBF,EADGpB,EAAOuB,UAAUC,SAAS,uBAE7D,GACA,IAEgBC,QAAQ3C,EAAS,CAAE4C,WAAW,EAAMC,SAAS,EAAMC,YAAY,GAC/E,CACA,SAASN,gBAAgBF,EAAOS,GACvBT,EAAMG,UAAUC,SAAS,gBAC1BJ,EAAMG,UAAUO,IAAI,eAEpBD,IAAeT,EAAMG,UAAUC,SAAS,uBACxCJ,EAAMG,UAAUO,IAAI,qBAE5B,CAlEAC,OAAOtD,MAAQ,IAAIA,MACnBM,SAASiD,iBAAiB,oBAAoB,WAC1CD,OAAOtD,MAAME,MACjB,IAoEAiB,wCAAwC","file":"app.js","sourcesContent":["function fhgov() {\n    this.init = function () {\n        restoreConditionalInputs();\n        enhanceAccessibleAutocomplete();\n    };\n    let restoreConditionalInputs = function () {\n        const element = document.querySelector(\"[data-conditional-active]\");\n        if (element instanceof HTMLElement) {\n            element.click();\n        }\n    };\n    let enhanceAccessibleAutocomplete = function () {\n        //WhichLocalAuthority.cshtml && AddOrganisationWhichLocalAuthority.cshtml\n        const modelLaOrganisationName = document.getElementById('modelLaOrganisationName');\n        if (modelLaOrganisationName) {\n            accessibleAutocomplete.enhanceSelectElement({\n                defaultValue: modelLaOrganisationName.value,\n                name: 'LaOrganisationName',\n                selectElement: document.querySelector('#LaOrganisationName')\n            });\n        }\n        //WhichVcsOrganisation.cshtml\n        const modelVcsOrganisationName = document.getElementById('modelVcsOrganisationName');\n        if (modelVcsOrganisationName) {\n            accessibleAutocomplete.enhanceSelectElement({\n                defaultValue: modelVcsOrganisationName.value,\n                name: 'VcsOrganisationName',\n                selectElement: document.querySelector('#VcsOrganisationName')\n            });\n        }\n    };\n}\nwindow.fhgov = new fhgov();\ndocument.addEventListener('DOMContentLoaded', function () {\n    window.fhgov.init();\n});\nfunction setupLanguageAutocompleteWhenAddAnother(element) {\n    if (!(element instanceof HTMLElement)) {\n        return;\n    }\n    const languageSelects = element.querySelectorAll(\"select[id^='language-']\");\n    languageSelects.forEach(function (select) {\n        accessibleAutocomplete.enhanceSelectElement({\n            name: 'languageName',\n            defaultValue: '',\n            selectElement: select\n        });\n    });\n    // work around accessible-autocomplete not handling errors or using standard govuk styling classes\n    // there's a discussion here about it...\n    // https://github.com/alphagov/accessible-autocomplete/issues/428\n    // but we've had to implement our own (hacky) solution by using MutationObserver\n    // and adding extra classes (with custom css) to the input element.\n    // I was going to either package up this code into an exported function to ease reuse and maintanence,\n    // or fork the accessible-autocomplete preact component, \n    // but someone is adding official support today (2024-01-12) so we should be able to remove this soon!\n    // https://github.com/alphagov/accessible-autocomplete/pull/602\n    //todo: fix aria-describedBy on the input too\n    // see https://github.com/alphagov/accessible-autocomplete/issues/589\n    const domObserver = new MutationObserver((mutationsList, observer) => {\n        const childListMutation = mutationsList.some(mutation => mutation.type === 'childList' && mutation.addedNodes.length > 0);\n        const attributesMutation = mutationsList.some(mutation => {\n            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n                const targetElement = mutation.target;\n                return targetElement.tagName.toLowerCase() === 'input' && targetElement.getAttribute('type') === 'text';\n            }\n            return false;\n        });\n        if (childListMutation) {\n            console.log('childListMutation');\n        }\n        if (attributesMutation) {\n            console.log('attributesMutation');\n        }\n        if (childListMutation || attributesMutation) {\n            /*todo: create list of input ids outside of observer? */\n            languageSelects.forEach(function (select) {\n                console.log(select.id);\n                const input = document.getElementById(select.id.replace('-select', ''));\n                console.log(input);\n                if (!input) {\n                    console.log('no input found for select');\n                    return;\n                }\n                const errorState = select.classList.contains('govuk-select--error');\n                addGovUkClasses(input, errorState);\n            });\n        }\n    });\n    domObserver.observe(element, { childList: true, subtree: true, attributes: true });\n}\nfunction addGovUkClasses(input, errorState) {\n    if (!input.classList.contains('govuk-input')) {\n        input.classList.add('govuk-input');\n    }\n    if (errorState && !input.classList.contains('govuk-input--error')) {\n        input.classList.add('govuk-input--error');\n    }\n}\n//todo: this is a hack - we want setupLanguageAutocompleteWhenAddAnother to be in the generated js file.\n// if we export it, it includes the export keyword in the generated js file\n// (but we use export in the other ts files, without the js containing export!)\n// so as a workaround we call it where it no-ops\nsetupLanguageAutocompleteWhenAddAnother(null);\nexport {};\n//});\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n"]}