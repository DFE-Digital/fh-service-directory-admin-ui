{"version":3,"sources":["tmp/js/app.js"],"names":["fhgov","this","init","restoreConditionalInputs","enhanceAccessibleAutocomplete","element","document","querySelector","HTMLElement","click","modelLaOrganisationName","getElementById","accessibleAutocomplete","enhanceSelectElement","defaultValue","value","name","selectElement","modelVcsOrganisationName","setupLanguageAutocompleteWhenAddAnother","querySelectorAll","forEach","select","input","id","replace","classList","contains","add","MutationObserver","mutationsList","observer","mutation","type","attributeName","observe","attributes","window","addEventListener"],"mappings":"AAAA,SAASA,QACLC,KAAKC,KAAO,WACRC,IACAC,GACR,EACI,IAAID,EAA2B,WAC3B,MAAME,EAAUC,SAASC,cAAc,6BACnCF,aAAmBG,aACnBH,EAAQI,OAEpB,EACQL,EAAgC,WAEhC,MAAMM,EAA0BJ,SAASK,eAAe,2BACpDD,GACAE,uBAAuBC,qBAAqB,CACxCC,aAAcJ,EAAwBK,MACtCC,KAAM,qBACNC,cAAeX,SAASC,cAAc,yBAI9C,MAAMW,EAA2BZ,SAASK,eAAe,4BACrDO,GACAN,uBAAuBC,qBAAqB,CACxCC,aAAcI,EAAyBH,MACvCC,KAAM,sBACNC,cAAeX,SAASC,cAAc,yBAGtD,CACA,CAKA,SAASY,wCAAwCd,GAC7C,KAAMA,aAAmBG,aACrB,OAEoBH,EAAQe,iBAAiB,2BACjCC,SAAQ,SAAUC,GAC9BV,uBAAuBC,qBAAqB,CACxCG,KAAM,eACNF,aAAc,GACdG,cAAeK,IAYnB,MAAMC,EAAQjB,SAASK,eAAeW,EAAOE,GAAGC,QAAQ,UAAW,KAInE,GAHKF,EAAMG,UAAUC,SAAS,gBAC1BJ,EAAMG,UAAUE,IAAI,eAEpBN,EAAOI,UAAUC,SAAS,uBAAwB,CAClDJ,EAAMG,UAAUE,IAAI,sBACH,IAAIC,kBAAiB,CAACC,EAAeC,KAClD,IAAK,IAAIC,KAAYF,EACK,eAAlBE,EAASC,MAAoD,UAA3BD,EAASE,gBACtCX,EAAMG,UAAUC,SAAS,gBAC1BJ,EAAMG,UAAUE,IAAI,eAEnBL,EAAMG,UAAUC,SAAS,uBAC1BJ,EAAMG,UAAUE,IAAI,sBAGhD,IAEqBO,QAAQZ,EAAO,CAAEa,YAAY,GAClD,CACA,GACA,CA9CAC,OAAOrC,MAAQ,IAAIA,MACnBM,SAASgC,iBAAiB,oBAAoB,WAC1CD,OAAOrC,MAAME,MACjB,IAgDAiB,wCAAwC","file":"app.js","sourcesContent":["function fhgov() {\n    this.init = function () {\n        restoreConditionalInputs();\n        enhanceAccessibleAutocomplete();\n    };\n    let restoreConditionalInputs = function () {\n        const element = document.querySelector(\"[data-conditional-active]\");\n        if (element instanceof HTMLElement) {\n            element.click();\n        }\n    };\n    let enhanceAccessibleAutocomplete = function () {\n        //WhichLocalAuthority.cshtml && AddOrganisationWhichLocalAuthority.cshtml\n        const modelLaOrganisationName = document.getElementById('modelLaOrganisationName');\n        if (modelLaOrganisationName) {\n            accessibleAutocomplete.enhanceSelectElement({\n                defaultValue: modelLaOrganisationName.value,\n                name: 'LaOrganisationName',\n                selectElement: document.querySelector('#LaOrganisationName')\n            });\n        }\n        //WhichVcsOrganisation.cshtml\n        const modelVcsOrganisationName = document.getElementById('modelVcsOrganisationName');\n        if (modelVcsOrganisationName) {\n            accessibleAutocomplete.enhanceSelectElement({\n                defaultValue: modelVcsOrganisationName.value,\n                name: 'VcsOrganisationName',\n                selectElement: document.querySelector('#VcsOrganisationName')\n            });\n        }\n    };\n}\nwindow.fhgov = new fhgov();\ndocument.addEventListener('DOMContentLoaded', function () {\n    window.fhgov.init();\n});\nfunction setupLanguageAutocompleteWhenAddAnother(element) {\n    if (!(element instanceof HTMLElement)) {\n        return;\n    }\n    const languageSelects = element.querySelectorAll(\"select[id^='language-']\"); // [id$='\\\\d+']\");\n    languageSelects.forEach(function (select) {\n        accessibleAutocomplete.enhanceSelectElement({\n            name: 'languageName',\n            defaultValue: '',\n            selectElement: select\n        });\n        // work around accessible-autocomplete not handling errors\n        // there's a discussion here about it...\n        // https://github.com/alphagov/accessible-autocomplete/issues/428\n        // but we've had to implement our own (hacky) solution by using MutationObserver\n        // and adding extra classes (with custom css) to the input element.\n        // I was going to package up this code into an exported function to ease reuse and maintanence,\n        // but someone is adding official support today (2024-01-12) so we should be able to remove this soon!\n        // https://github.com/alphagov/accessible-autocomplete/pull/602\n        //todo: fix aria-describedBy on the input too\n        // see https://github.com/alphagov/accessible-autocomplete/issues/589\n        const input = document.getElementById(select.id.replace('-select', ''));\n        if (!input.classList.contains('govuk-input')) {\n            input.classList.add('govuk-input');\n        }\n        if (select.classList.contains('govuk-select--error')) {\n            input.classList.add('govuk-input--error');\n            const observer = new MutationObserver((mutationsList, observer) => {\n                for (let mutation of mutationsList) {\n                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n                        if (!input.classList.contains('govuk-input')) {\n                            input.classList.add('govuk-input');\n                        }\n                        if (!input.classList.contains('govuk-input--error')) {\n                            input.classList.add('govuk-input--error');\n                        }\n                    }\n                }\n            });\n            observer.observe(input, { attributes: true });\n        }\n    });\n}\n//todo: this is a hack - we want setupLanguageAutocompleteWhenAddAnother to be in the generated js file.\n// if we export it, it includes the export keyword in the generated js file\n// (but we use export in the other ts files, without the js containing export!)\n// so as a workaround we call it where it no-ops\nsetupLanguageAutocompleteWhenAddAnother(null);\nexport {};\n//});\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n"]}