{"version":3,"sources":["tmp/js/components/cookie-functions.js","tmp/js/components/helpers.js","tmp/js/components/postcode.js","tmp/js/components/analytics.js","tmp/js/components/cookie-banner.js","tmp/js/components/cookies-page.js","tmp/js/components/back-links.js","tmp/js/components/visibility-toggle.js","tmp/js/familyhubs.js"],"names":["COOKIE_CATEGORIES","analytics","window","GA_CONTAINER_ID","essential","GA_COOKIE_NAME","DEFAULT_COOKIE_CONSENT","version","GDS_CONSENT_COOKIE_VERSION","getConsentCookie","consentCookie","getCookie","consentCookieObj","JSON","parse","err","isValidConsentCookie","options","setConsentCookie","cookieConsent","option","stringify","setCookie","days","resetCookies","cookieType","forEach","cookie","deleteCookie","userAllowsCookieCategory","cookieCategory","cookiePreferences","e","console","error","userAllowsCookie","cookieName","category","indexOf","name","nameEQ","cookies","document","split","i","len","length","charAt","substring","decodeURIComponent","value","cookieString","date","Date","setTime","getTime","toUTCString","location","protocol","hostname","nodeListForEach","nodes","callback","NodeList","prototype","call","INCODE_REGEX","POSTCODE_REGEX","SPACE_REGEX","sanitize","s","replace","toUpperCase","isValid","postcode","match","toOutcode","gtag","command","args","dataLayer","push","arguments","GaMeasurementId","initAnalytics","gaMeasurementId","Boolean","setDefaultConsent","loadGaScript","pageViewParams","getPiiSafePageView","send_page_view","page_path","page_location","page_referrer","referrer","cookie_flags","userConsent","updateAnalyticsStorageConsent","sendPageViewEvent","sendFilterPageCustomEvent","analytics_storage","granted","delayMs","element","getElementById","totalResults","getAttribute","undefined","total_results","sendAnalyticsCustomEvent","accepted","source","f","getElementsByTagName","j","createElement","async","src","parentNode","insertBefore","pageView","page_title","title","send_to","piiSafeReferrerQueryString","getPiiSafeQueryString","URL","search","urlArray","piiSafeQueryString","href","pathname","queryString","queryParams","URLSearchParams","get","set","delete","toString","cookieBannerAcceptSelector","cookieBannerRejectSelector","cookieBannerHideButtonSelector","cookieMessageSelector","cookieConfirmationAcceptSelector","cookieConfirmationRejectSelector","CookieBanner","$module","this","CookiesPage","initializeBackButtons","history","querySelectorAll","link","style","display","addEventListener","back","initializeVisibilityToggles","toggle","event","toToggleId","toToggle","init","$cookieBanner","$acceptButton","querySelector","$rejectButton","$cookieMessage","$cookieConfirmationAccept","$cookieConfirmationReject","$cookieBannerHideButtons","onCookiesPage","currentConsentCookie","CookieFunctions.getConsentCookie","CookieFunctions.isValidConsentCookie","CookieFunctions.resetCookies","removeAttribute","acceptCookies","bind","rejectCookies","$cookieBannerHideButton","hideBanner","setAttribute","CookieFunctions.setConsentCookie","revealConfirmationMessage","confirmationMessage","focus","$cookiePage","$cookieForm","$cookieFormFieldsets","$successNotification","$successLink","$cookieFormFieldset","showUserPreference","savePreferences","preventDefault","preferences","getCookieType","selectedItem","analyticsAccepted","showSuccessNotification","preference","radioValue","checked","scrollTo","id","FamilyHubsFrontend","initAll","GA_MEASUREMENT_ID","GOVUKFrontend","MOJFrontend"],"mappings":"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","file":"familyhubs-frontend-6.0.0.min.js","sourcesContent":["/* Users can (dis)allow different groups of cookies. */\nconst COOKIE_CATEGORIES = {\n    analytics: ['_ga', '_ga_' + window.GA_CONTAINER_ID],\n    /* Essential cookies\n     *\n     * Essential cookies cannot be deselected, but we want our cookie code to\n     * only allow adding cookies that are documented in this object, so they need\n     * to be added here.\n     */\n    essential: [window.GA_COOKIE_NAME]\n};\n/*\n * Default cookie preferences if user has no cookie preferences.\n *\n * Note that this doesn't include a key for essential cookies, essential\n * cookies cannot be disallowed. If the object contains { essential: false }\n * this will be ignored.\n */\nconst DEFAULT_COOKIE_CONSENT = {\n    analytics: false,\n    version: window.GDS_CONSENT_COOKIE_VERSION\n};\n/** Return the user's cookie preferences.\n *\n * If the consent cookie is malformed, or not present,\n * returns null.\n */\nexport function getConsentCookie() {\n    const consentCookie = getCookie(window.GA_COOKIE_NAME);\n    let consentCookieObj;\n    if (consentCookie) {\n        try {\n            consentCookieObj = JSON.parse(consentCookie);\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    else {\n        return null;\n    }\n    return consentCookieObj;\n}\n/** Check the cookie preferences object.\n *\n * If the consent object is not present, malformed, or incorrect version,\n * returns false, otherwise returns true.\n */\nexport function isValidConsentCookie(options) {\n    return (options && options.version >= window.GDS_CONSENT_COOKIE_VERSION);\n}\n/** Update the user's cookie preferences. */\nexport function setConsentCookie(options) {\n    let cookieConsent = getConsentCookie();\n    if (!cookieConsent) {\n        cookieConsent = JSON.parse(JSON.stringify(DEFAULT_COOKIE_CONSENT));\n    }\n    // Merge current cookie preferences and new preferences\n    for (var option in options) {\n        cookieConsent[option] = options[option];\n    }\n    // Essential cookies cannot be deselected, ignore this cookie type\n    delete cookieConsent.essential;\n    cookieConsent.version = window.GDS_CONSENT_COOKIE_VERSION;\n    // Set the consent cookie\n    setCookie(window.GA_COOKIE_NAME, JSON.stringify(cookieConsent), { days: 365 });\n    // Update the other cookies\n    resetCookies();\n}\n/** Apply the user's cookie preferences\n *\n * Deletes any cookies the user has not consented to.\n */\nexport function resetCookies() {\n    var options = getConsentCookie();\n    // If no preferences or old version use the default\n    if (!isValidConsentCookie(options)) {\n        options = JSON.parse(JSON.stringify(DEFAULT_COOKIE_CONSENT));\n    }\n    for (var cookieType in options) {\n        if (cookieType === 'version') {\n            continue;\n        }\n        // Essential cookies cannot be deselected, ignore this cookie type\n        if (cookieType === 'essential') {\n            continue;\n        }\n        if (!options[cookieType]) {\n            // Fetch the cookies in that category\n            var cookiesInCategory = COOKIE_CATEGORIES[cookieType];\n            cookiesInCategory.forEach(function (cookie) {\n                deleteCookie(cookie);\n            });\n        }\n    }\n}\nfunction userAllowsCookieCategory(cookieCategory, cookiePreferences) {\n    // Essential cookies are always allowed\n    if (cookieCategory === 'essential') {\n        return true;\n    }\n    // Sometimes cookiePreferences is malformed in some of the tests, so we need to handle these\n    try {\n        return cookiePreferences[cookieCategory];\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n}\nfunction userAllowsCookie(cookieName) {\n    // Always allow setting the consent cookie\n    if (cookieName === window.GA_COOKIE_NAME) {\n        return true;\n    }\n    // Get the current cookie preferences\n    var cookiePreferences = getConsentCookie();\n    // If no preferences or old version use the default\n    if (!isValidConsentCookie(cookiePreferences)) {\n        cookiePreferences = DEFAULT_COOKIE_CONSENT;\n    }\n    for (var category in COOKIE_CATEGORIES) {\n        var cookiesInCategory = COOKIE_CATEGORIES[category];\n        if (cookiesInCategory.indexOf(cookieName) !== '-1') {\n            return userAllowsCookieCategory(category, cookiePreferences);\n        }\n    }\n    // Deny the cookie if it is not known to us\n    return false;\n}\nfunction getCookie(name) {\n    var nameEQ = name + '=';\n    var cookies = document.cookie.split(';');\n    for (var i = 0, len = cookies.length; i < len; i++) {\n        var cookie = cookies[i];\n        while (cookie.charAt(0) === ' ') {\n            cookie = cookie.substring(1, cookie.length);\n        }\n        if (cookie.indexOf(nameEQ) === 0) {\n            return decodeURIComponent(cookie.substring(nameEQ.length));\n        }\n    }\n    return null;\n}\n// do we need to set the domain?\nfunction setCookie(name, value, options) {\n    if (userAllowsCookie(name)) {\n        if (typeof options === 'undefined') {\n            options = {};\n        }\n        var cookieString = name + '=' + value + '; path=/; SameSite=Strict';\n        if (options.days) {\n            var date = new Date();\n            date.setTime(date.getTime() + (options.days * 24 * 60 * 60 * 1000));\n            cookieString = cookieString + '; expires=' + date.toUTCString();\n        }\n        if (document.location.protocol === 'https:') {\n            cookieString = cookieString + '; Secure';\n        }\n        document.cookie = cookieString;\n    }\n}\nfunction deleteCookie(name) {\n    if (getCookie(name)) {\n        // Cookies need to be deleted in the same level of specificity in which they were set\n        // If a cookie was set with a specified domain, it needs to be specified when deleted\n        // If a cookie wasn't set with the domain attribute, it shouldn't be there when deleted\n        // You can't tell if a cookie was set with a domain attribute or not, so try both options\n        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/';\n        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=' + window.location.hostname + ';path=/';\n        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=.' + window.location.hostname + ';path=/';\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/*todo: remove this and use the version in govuk instead (as it's already included) */\nexport function nodeListForEach(nodes, callback) {\n    if (window.NodeList.prototype.forEach) {\n        return nodes.forEach(callback);\n    }\n    for (var i = 0; i < nodes.length; i++) {\n        callback.call(window, nodes[i], i, nodes);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzRkFBc0Y7QUFFdEYsTUFBTSxVQUFVLGVBQWUsQ0FDM0IsS0FBMEIsRUFDMUIsUUFBNEU7SUFFNUUsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7UUFDbkMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbkMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM3QztBQUNMLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyp0b2RvOiByZW1vdmUgdGhpcyBhbmQgdXNlIHRoZSB2ZXJzaW9uIGluIGdvdnVrIGluc3RlYWQgKGFzIGl0J3MgYWxyZWFkeSBpbmNsdWRlZCkgKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBub2RlTGlzdEZvckVhY2goXHJcbiAgICBub2RlczogTm9kZUxpc3RPZjxFbGVtZW50PixcclxuICAgIGNhbGxiYWNrOiAobm9kZTogRWxlbWVudCwgaW5kZXg6IG51bWJlciwgbm9kZXM6IE5vZGVMaXN0T2Y8RWxlbWVudD4pID0+IHZvaWRcclxuKTogdm9pZCB7XHJcbiAgICBpZiAod2luZG93Lk5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGVzLmZvckVhY2goY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNhbGxiYWNrLmNhbGwod2luZG93LCBub2Rlc1tpXSwgaSwgbm9kZXMpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==\n","// from https://github.com/ideal-postcodes/postcode\n/**\n * @hidden\n */\nexport const DISTRICT_SPLIT_REGEX = /^([a-z]{1,2}\\d)([a-z])$/i;\n/**\n * Tests for the unit section of a postcode\n */\nexport const UNIT_REGEX = /[a-z]{2}$/i;\n/**\n * Tests for the inward code section of a postcode\n */\nexport const INCODE_REGEX = /\\d[a-z]{2}$/i;\n/**\n * Tests for the outward code section of a postcode\n */\nexport const OUTCODE_REGEX = /^[a-z]{1,2}\\d[a-z\\d]?$/i;\n/**\n * Tests for a valid postcode\n */\nexport const POSTCODE_REGEX = /^[a-z]{1,2}\\d[a-z\\d]?\\s*\\d[a-z]{2}$/i;\n/**\n * Test for a valid postcode embedded in text\n */\nexport const POSTCODE_CORPUS_REGEX = /[a-z]{1,2}\\d[a-z\\d]?\\s*\\d[a-z]{2}/gi;\n/**\n * Tests for the area section of a postcode\n */\nexport const AREA_REGEX = /^[a-z]{1,2}/i;\n/**\n * Invalid postcode prototype\n * @hidden\n */\nconst invalidPostcode = {\n    valid: false,\n    postcode: null,\n    incode: null,\n    outcode: null,\n    area: null,\n    district: null,\n    subDistrict: null,\n    sector: null,\n    unit: null,\n};\n/**\n * Return first elem of input is RegExpMatchArray or null if input null\n * @hidden\n */\nconst firstOrNull = (match) => {\n    if (match === null)\n        return null;\n    return match[0];\n};\nconst SPACE_REGEX = /\\s+/gi;\n/**\n * Drop all spaces and uppercase\n * @hidden\n */\nconst sanitize = (s) => s.replace(SPACE_REGEX, \"\").toUpperCase();\n/**\n * Sanitizes string and returns regex matches\n * @hidden\n */\nconst matchOn = (s, regex) => sanitize(s).match(regex);\n/**\n * Detects a \"valid\" postcode\n * - Starts and ends on a non-space character\n * - Any length of intervening space is allowed\n * - Must conform to one of following schemas:\n *  - AA1A 1AA\n *  - A1A 1AA\n *  - A1 1AA\n *  - A99 9AA\n *  - AA9 9AA\n *  - AA99 9AA\n */\nexport const isValid = (postcode) => postcode.match(POSTCODE_REGEX) !== null;\n/**\n * Returns true if string is a valid outcode\n */\nexport const validOutcode = (outcode) => outcode.match(OUTCODE_REGEX) !== null;\n/**\n * Returns a normalised postcode string (i.e. uppercased and properly spaced)\n *\n * Returns null if invalid postcode\n */\nexport const toNormalised = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const incode = toIncode(postcode);\n    if (incode === null)\n        return null;\n    return `${outcode} ${incode}`;\n};\n/**\n * Returns a correctly formatted outcode given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toOutcode = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    return sanitize(postcode).replace(INCODE_REGEX, \"\");\n};\n/**\n * Returns a correctly formatted incode given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toIncode = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, INCODE_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted area given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toArea = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, AREA_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted sector given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toSector = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const incode = toIncode(postcode);\n    if (incode === null)\n        return null;\n    return `${outcode} ${incode[0]}`;\n};\n/**\n * Returns a correctly formatted unit given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toUnit = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, UNIT_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted district given a postcode\n *\n * Returns null if invalid postcode\n *\n * @example\n *\n * ```\n * toDistrict(\"AA9 9AA\") // => \"AA9\"\n * toDistrict(\"A9A 9AA\") // => \"A9\"\n * ```\n */\nexport const toDistrict = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const match = outcode.match(DISTRICT_SPLIT_REGEX);\n    if (match === null)\n        return outcode;\n    return match[1];\n};\n/**\n * Returns a correctly formatted subdistrict given a postcode\n *\n * Returns null if no subdistrict is available on valid postcode\n * Returns null if invalid postcode\n *\n * @example\n *\n * ```\n * toSubDistrict(\"AA9A 9AA\") // => \"AA9A\"\n * toSubDistrict(\"A9A 9AA\") // => \"A9A\"\n * toSubDistrict(\"AA9 9AA\") // => null\n * toSubDistrict(\"A9 9AA\") // => null\n * ```\n */\nexport const toSubDistrict = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const split = outcode.match(DISTRICT_SPLIT_REGEX);\n    if (split === null)\n        return null;\n    return outcode;\n};\n/**\n * Returns a ValidPostcode or InvalidPostcode object from a postcode string\n *\n * @example\n *\n * ```\n * import { parse } from \"postcode\";\n *\n * const {\n * postcode,    // => \"SW1A 2AA\"\n * outcode,     // => \"SW1A\"\n * incode,      // => \"2AA\"\n * area,        // => \"SW\"\n * district,    // => \"SW1\"\n * unit,        // => \"AA\"\n * sector,      // => \"SW1A 2\"\n * subDistrict, // => \"SW1A\"\n * valid,       // => true\n * } = parse(\"Sw1A     2aa\");\n *\n * const {\n * postcode,    // => null\n * outcode,     // => null\n * incode,      // => null\n * area,        // => null\n * district,    // => null\n * unit,        // => null\n * sector,      // => null\n * subDistrict, // => null\n * valid,       // => false\n * } = parse(\"    Oh no, ):   \");\n * ```\n */\nexport const parse = (postcode) => {\n    if (!isValid(postcode))\n        return Object.assign({}, invalidPostcode);\n    return {\n        valid: true,\n        postcode: toNormalised(postcode),\n        incode: toIncode(postcode),\n        outcode: toOutcode(postcode),\n        area: toArea(postcode),\n        district: toDistrict(postcode),\n        subDistrict: toSubDistrict(postcode),\n        sector: toSector(postcode),\n        unit: toUnit(postcode),\n    };\n};\n/**\n * Searches a body of text for postcode matches\n *\n * Returns an empty array if no match\n *\n * @example\n *\n * ```\n * // Retrieve valid postcodes in a body of text\n * const matches = match(\"The PM and her no.2 live at SW1A2aa and SW1A 2AB\"); // => [\"SW1A2aa\", \"SW1A 2AB\"]\n *\n * // Perform transformations like normalisation postcodes using `.map` and `toNormalised`\n * matches.map(toNormalised); // => [\"SW1A 2AA\", \"SW1A 2AB\"]\n *\n * // No matches yields empty array\n * match(\"Some London outward codes are SW1A, NW1 and E1\"); // => []\n * ```\n */\nexport const match = (corpus) => corpus.match(POSTCODE_CORPUS_REGEX) || [];\n/**\n * Replaces postcodes in a body of text with a string\n *\n * By default the replacement string is empty string `\"\"`\n *\n * @example\n *\n * ```\n * // Replace postcodes in a body of text\n * replace(\"The PM and her no.2 live at SW1A2AA and SW1A 2AB\");\n * // => { match: [\"SW1A2AA\", \"SW1A 2AB\"], result: \"The PM and her no.2 live at  and \" }\n *\n * // Add custom replacement\n * replace(\"The PM lives at SW1A 2AA\", \"Downing Street\");\n * // => { match: [\"SW1A 2AA\"], result: \"The PM lives at Downing Street\" };\n *\n * // No match\n * replace(\"Some London outward codes are SW1A, NW1 and E1\");\n * // => { match: [], result: \"Some London outward codes are SW1A, NW1 and E1\" }\n * ```\n */\nexport const replace = (corpus, replaceWith = \"\") => ({\n    match: match(corpus),\n    result: corpus.replace(POSTCODE_CORPUS_REGEX, replaceWith),\n});\nexport const FIXABLE_REGEX = /^\\s*[a-z01]{1,2}[0-9oi][a-z\\d]?\\s*[0-9oi][a-z01]{2}\\s*$/i;\n/**\n * Attempts to fix and clean a postcode. Specifically:\n * - Performs character conversion on obviously wrong and commonly mixed up letters (e.g. O => 0 and vice versa)\n * - Trims string\n * - Properly adds space between outward and inward codes\n *\n * If the postcode cannot be coerced into a valid format, the original string is returned\n *\n * @example\n * ```javascript\n * fix(\" SW1A  2AO\") => \"SW1A 2AO\" // Properly spaces\n * fix(\"SW1A 2A0\") => \"SW1A 2AO\" // 0 is coerced into \"0\"\n * ```\n *\n * Aims to be used in conjunction with parse to make postcode entry more forgiving:\n *\n * @example\n * ```javascript\n * const { inward } = parse(fix(\"SW1A 2A0\")); // inward = \"2AO\"\n * ```\n */\nexport const fix = (s) => {\n    const match = s.match(FIXABLE_REGEX);\n    if (match === null)\n        return s;\n    s = s.toUpperCase().trim().replace(/\\s+/gi, \"\");\n    const l = s.length;\n    const inward = s.slice(l - 3, l);\n    return `${coerceOutcode(s.slice(0, l - 3))} ${coerce(\"NLL\", inward)}`;\n};\nconst toLetter = {\n    \"0\": \"O\",\n    \"1\": \"I\",\n};\nconst toNumber = {\n    O: \"0\",\n    I: \"1\",\n};\nconst coerceOutcode = (i) => {\n    if (i.length === 2)\n        return coerce(\"LN\", i);\n    if (i.length === 3)\n        return coerce(\"L??\", i);\n    if (i.length === 4)\n        return coerce(\"LLN?\", i);\n    return i;\n};\n/**\n * Given a pattern of letters, numbers and unknowns represented as a sequence\n * of L, Ns and ? respectively; coerce them into the correct type given a\n * mapping of potentially confused letters\n *\n * @hidden\n *\n * @example coerce(\"LLN\", \"0O8\") => \"OO8\"\n */\nconst coerce = (pattern, input) => input\n    .split(\"\")\n    .reduce((acc, c, i) => {\n    const target = pattern.charAt(i);\n    if (target === \"N\")\n        acc.push(toNumber[c] || c);\n    if (target === \"L\")\n        acc.push(toLetter[c] || c);\n    if (target === \"?\")\n        acc.push(c);\n    return acc;\n}, [])\n    .join(\"\");\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","//todo: consent mode debugging/check: https://developers.google.com/tag-platform/devguides/consent-debugging\nimport { getConsentCookie, isValidConsentCookie } from './cookie-functions';\nimport { toOutcode } from './postcode';\nfunction gtag(command, ...args) {\n    window.dataLayer = window.dataLayer || [];\n    window.dataLayer.push(arguments);\n}\nlet GaMeasurementId = '';\n//todo: use prototype? (or class?)\n// (having an object (prototype/class) will ensure that GaMeasurementId will have already been set)\nexport default function initAnalytics(gaMeasurementId) {\n    // if the environment doesn't have a measurement id, don't load analytics\n    if (!Boolean(gaMeasurementId)) {\n        return;\n    }\n    GaMeasurementId = gaMeasurementId;\n    setDefaultConsent();\n    loadGaScript(gaMeasurementId);\n    gtag('js', new Date());\n    const pageViewParams = getPiiSafePageView(gaMeasurementId);\n    // set the config for auto generated events other than page_view\n    gtag('config', gaMeasurementId, {\n        send_page_view: false,\n        page_path: pageViewParams.page_path,\n        page_location: pageViewParams.page_location,\n        page_referrer: pageViewParams.referrer,\n        cookie_flags: 'secure'\n    });\n    const userConsent = getConsentCookie();\n    if (userConsent && isValidConsentCookie(userConsent) && userConsent.analytics) {\n        updateAnalyticsStorageConsent(true);\n    }\n    sendPageViewEvent();\n    sendFilterPageCustomEvent();\n}\nfunction setDefaultConsent() {\n    gtag('consent', 'default', {\n        'analytics_storage': 'denied'\n    });\n    gtag('set', 'url_passthrough', true);\n}\nexport function updateAnalyticsStorageConsent(granted, delayMs) {\n    let options = {\n        'analytics_storage': granted ? 'granted' : 'denied'\n    };\n    if (typeof delayMs !== 'undefined') {\n        options['wait_for_update'] = delayMs;\n    }\n    gtag('consent', 'update', options);\n}\nexport function sendPageViewEvent() {\n    // send the page_view event manually (https://developers.google.com/analytics/devguides/collection/gtagjs/pages#default_behavior)\n    gtag('event', 'page_view', getPiiSafePageView(GaMeasurementId));\n}\nexport function sendFilterPageCustomEvent() {\n    //todo: make filter page only\n    const element = document.getElementById('results');\n    const totalResults = element === null || element === void 0 ? void 0 : element.getAttribute('data-total-results');\n    if (totalResults === undefined)\n        return;\n    gtag('event', 'filter_page', {\n        'total_results': totalResults\n    });\n}\nexport function sendAnalyticsCustomEvent(accepted, source) {\n    gtag('event', 'analytics', {\n        'accepted': accepted,\n        'source': source\n    });\n}\nfunction loadGaScript(gaMeasurementId) {\n    const f = document.getElementsByTagName('script')[0];\n    const j = document.createElement('script');\n    j.async = true;\n    j.src = 'https://www.googletagmanager.com/gtag/js?id=' + gaMeasurementId;\n    f.parentNode.insertBefore(j, f);\n}\nfunction getPiiSafePageView(gaMeasurementId) {\n    const pageView = {\n        page_title: document.title,\n        send_to: gaMeasurementId,\n        referrer: '',\n        page_location: '',\n        page_path: ''\n    };\n    //todo: set as referrer or page_referrer in pageView - does it matter? is it only picking it up from the config?\n    //todo: get piisafe referrer function\n    if (document.referrer !== '') {\n        const referrerUrl = new URL(document.referrer);\n        const piiSafeReferrerQueryString = getPiiSafeQueryString(referrerUrl.search);\n        if (piiSafeReferrerQueryString == null) {\n            pageView.referrer = document.referrer;\n        }\n        else {\n            const urlArray = document.referrer.split('?');\n            pageView.referrer = urlArray[0] + piiSafeReferrerQueryString;\n        }\n    }\n    const piiSafeQueryString = getPiiSafeQueryString(window.location.search);\n    if (piiSafeQueryString == null) {\n        pageView.page_location = window.location.href;\n        pageView.page_path = window.location.pathname + window.location.search;\n        return pageView;\n    }\n    const urlArray = window.location.href.split('?');\n    pageView.page_location = urlArray[0] + piiSafeQueryString;\n    pageView.page_path = window.location.pathname + piiSafeQueryString;\n    return pageView;\n}\nfunction getPiiSafeQueryString(queryString) {\n    //todo: for safety, convert to lowercase, so that if the user changes the case of the url, we still don't collect pii\n    const queryParams = new URLSearchParams(queryString);\n    let postcode = queryParams.get('postcode');\n    if (postcode == null) {\n        // null indicates original query params were already pii safe\n        return null;\n    }\n    postcode = toOutcode(postcode);\n    queryParams.set('postcode', postcode);\n    queryParams.delete('latitude');\n    queryParams.delete('longitude');\n    return '?' + queryParams.toString();\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import * as CookieFunctions from './cookie-functions.js';\n/*todo: we don't meed a pollyfill for bind, as long as we server up the non js version of the site for ie8 (https://caniuse.com/?search=bind) */\n/*import 'govuk-frontend/govuk/vendor/polyfills/Function/prototype/bind'*/\n/*todo: i think we're ok for this too (see above about ie8), but we _might_ need it for >8 ie (use? https://www.npmjs.com/package/events-polyfill)*/\n/*import 'govuk-frontend/govuk/vendor/polyfills/Event'*/\nimport { nodeListForEach } from './helpers';\nimport { sendPageViewEvent, sendFilterPageCustomEvent, sendAnalyticsCustomEvent, updateAnalyticsStorageConsent } from './analytics';\nconst cookieBannerAcceptSelector = '.js-cookie-banner-accept';\nconst cookieBannerRejectSelector = '.js-cookie-banner-reject';\nconst cookieBannerHideButtonSelector = '.js-cookie-banner-hide';\nconst cookieMessageSelector = '.js-cookie-banner-message';\nconst cookieConfirmationAcceptSelector = '.js-cookie-banner-confirmation-accept';\nconst cookieConfirmationRejectSelector = '.js-cookie-banner-confirmation-reject';\nexport default function CookieBanner($module) {\n    this.$module = $module;\n}\nCookieBanner.prototype.init = function () {\n    this.$cookieBanner = this.$module;\n    this.$acceptButton = this.$module.querySelector(cookieBannerAcceptSelector);\n    this.$rejectButton = this.$module.querySelector(cookieBannerRejectSelector);\n    this.$cookieMessage = this.$module.querySelector(cookieMessageSelector);\n    this.$cookieConfirmationAccept = this.$module.querySelector(cookieConfirmationAcceptSelector);\n    this.$cookieConfirmationReject = this.$module.querySelector(cookieConfirmationRejectSelector);\n    this.$cookieBannerHideButtons = this.$module.querySelectorAll(cookieBannerHideButtonSelector);\n    // Exit if no cookie banner module\n    // or if we're on the cookies page to avoid circular journeys\n    if (!this.$cookieBanner || this.onCookiesPage()) {\n        return;\n    }\n    // Show the cookie banner to users who have not consented or have an\n    // outdated consent cookie\n    var currentConsentCookie = CookieFunctions.getConsentCookie();\n    if (!currentConsentCookie || !CookieFunctions.isValidConsentCookie(currentConsentCookie)) {\n        // If the consent cookie version is not valid, we need to remove any cookies which have been\n        // set previously\n        CookieFunctions.resetCookies();\n        this.$cookieBanner.removeAttribute('hidden');\n    }\n    this.$acceptButton.addEventListener('click', this.acceptCookies.bind(this));\n    this.$rejectButton.addEventListener('click', this.rejectCookies.bind(this));\n    nodeListForEach(this.$cookieBannerHideButtons, function ($cookieBannerHideButton) {\n        $cookieBannerHideButton.addEventListener('click', this.hideBanner.bind(this));\n    }.bind(this));\n};\nCookieBanner.prototype.hideBanner = function () {\n    this.$cookieBanner.setAttribute('hidden', true);\n};\nCookieBanner.prototype.acceptCookies = function () {\n    // Do actual cookie consent bit\n    CookieFunctions.setConsentCookie({ analytics: true });\n    updateAnalyticsStorageConsent(true);\n    sendAnalyticsCustomEvent(true, 'banner');\n    sendPageViewEvent();\n    sendFilterPageCustomEvent();\n    // Hide banner and show confirmation message\n    this.$cookieMessage.setAttribute('hidden', true);\n    this.revealConfirmationMessage(this.$cookieConfirmationAccept);\n};\nCookieBanner.prototype.rejectCookies = function () {\n    updateAnalyticsStorageConsent(true);\n    sendAnalyticsCustomEvent(false, 'banner');\n    updateAnalyticsStorageConsent(false);\n    //setTimeout(CookieFunctions.setConsentCookie.bind({ analytics: false }), 250);\n    CookieFunctions.setConsentCookie({ analytics: false });\n    // Hide banner and show confirmation message\n    this.$cookieMessage.setAttribute('hidden', true);\n    this.revealConfirmationMessage(this.$cookieConfirmationReject);\n};\nCookieBanner.prototype.revealConfirmationMessage = function (confirmationMessage) {\n    confirmationMessage.removeAttribute('hidden');\n    // Set tabindex to -1 to make the confirmation banner focusable with JavaScript\n    if (!confirmationMessage.getAttribute('tabindex')) {\n        confirmationMessage.setAttribute('tabindex', '-1');\n        confirmationMessage.addEventListener('blur', function () {\n            confirmationMessage.removeAttribute('tabindex');\n        });\n    }\n    confirmationMessage.focus();\n};\nCookieBanner.prototype.onCookiesPage = function () {\n    return window.location.pathname === '/cookies/';\n};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import { getConsentCookie, setConsentCookie } from './cookie-functions';\nimport { nodeListForEach } from './helpers';\nimport { sendPageViewEvent, sendAnalyticsCustomEvent, updateAnalyticsStorageConsent } from './analytics';\nfunction CookiesPage($module) {\n    this.$module = $module;\n}\nCookiesPage.prototype.init = function () {\n    this.$cookiePage = this.$module;\n    if (!this.$cookiePage) {\n        return;\n    }\n    this.$cookieForm = this.$cookiePage.querySelector('.js-cookies-page-form');\n    this.$cookieFormFieldsets = this.$cookieForm.querySelectorAll('.js-cookies-page-form-fieldset');\n    this.$successNotification = this.$cookiePage.querySelector('.js-cookies-page-success');\n    this.$successLink = this.$cookiePage.querySelector('.js-cookies-page-success-link');\n    nodeListForEach(this.$cookieFormFieldsets, function ($cookieFormFieldset) {\n        this.showUserPreference($cookieFormFieldset, getConsentCookie());\n        /*        $cookieFormFieldset.removeAttribute('hidden')*/\n    }.bind(this));\n    // Show submit button\n    //this.$cookieForm.querySelector('.js-cookies-form-button').removeAttribute('hidden')\n    this.$cookieForm.addEventListener('submit', this.savePreferences.bind(this));\n};\nCookiesPage.prototype.savePreferences = function (event) {\n    // Stop default form submission behaviour\n    event.preventDefault();\n    var preferences = {};\n    nodeListForEach(this.$cookieFormFieldsets, function ($cookieFormFieldset) {\n        var cookieType = this.getCookieType($cookieFormFieldset);\n        var selectedItem = $cookieFormFieldset.querySelector('input[name=' + cookieType + ']:checked').value;\n        preferences[cookieType] = selectedItem === 'true';\n    }.bind(this));\n    updateAnalyticsStorageConsent(true);\n    const analyticsAccepted = preferences['analytics'];\n    sendAnalyticsCustomEvent(analyticsAccepted, 'cookies');\n    if (analyticsAccepted) {\n        sendPageViewEvent();\n    }\n    else {\n        updateAnalyticsStorageConsent(false);\n    }\n    setConsentCookie(preferences);\n    // handle the corner case, where the user has selected their preference on the cookie page, whilst the banner is still open as they haven't previously selected their preference\n    //todo: call hideBanner\n    var banner = document.querySelector('[data-module=\"govuk-cookie-banner\"]');\n    banner.setAttribute('hidden', 'true');\n    this.showSuccessNotification();\n};\nCookiesPage.prototype.showUserPreference = function ($cookieFormFieldset, preferences) {\n    var cookieType = this.getCookieType($cookieFormFieldset);\n    var preference = false;\n    if (cookieType && preferences && preferences[cookieType] !== undefined) {\n        preference = preferences[cookieType];\n    }\n    var radioValue = preference ? 'true' : 'false';\n    var radio = $cookieFormFieldset.querySelector('input[name=' + cookieType + '][value=' + radioValue + ']');\n    radio.checked = true;\n};\nCookiesPage.prototype.showSuccessNotification = function () {\n    this.$successNotification.removeAttribute('hidden');\n    // if the user's come to the cookies page through the link in the cookie banner, show a link to take them back to the page they came from\n    //todo: use full url?\n    var referrer = document.referrer ? new URL(document.referrer).pathname : false;\n    if (referrer && referrer !== document.location.pathname) {\n        this.$successLink.href = referrer;\n        this.$successLink.removeAttribute('hidden');\n    }\n    else {\n        this.$successLink.setAttribute('hidden', 'true');\n    }\n    // Set tabindex to -1 to make the element focusable with JavaScript.\n    // GOV.UK Frontend will remove the tabindex on blur as the component doesn't\n    // need to be focusable after the user has read the text.\n    if (!this.$successNotification.getAttribute('tabindex')) {\n        this.$successNotification.setAttribute('tabindex', '-1');\n    }\n    this.$successNotification.focus();\n    // scroll to the top of the page\n    window.scrollTo(0, 0);\n};\nCookiesPage.prototype.getCookieType = function ($cookieFormFieldset) {\n    return $cookieFormFieldset.id;\n};\nexport default CookiesPage;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import { nodeListForEach } from './helpers';\nexport function initializeBackButtons() {\n    // Check if the page wasn't opened in a new tab or a standalone window\n    if (history.length > 1) {\n        const backLinks = document.querySelectorAll(\".fh-back-link\");\n        nodeListForEach(backLinks, (link) => {\n            link.style.display = \"block\";\n            // Add an event listener to handle the back button click\n            link.addEventListener(\"click\", () => {\n                // Go back to the previous page in the browser's history\n                window.history.back();\n            });\n        });\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYmFjay1saW5rcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRTNDLE1BQU0sVUFBVSxxQkFBcUI7SUFFakMsc0VBQXNFO0lBQ3RFLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFFcEIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdELGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUF1QixFQUFFLEVBQUU7WUFFbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBRTdCLHdEQUF3RDtZQUN4RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDaEMsd0RBQXdEO2dCQUN4RCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7S0FDTjtBQUNMLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9iYWNrLWxpbmtzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9kZUxpc3RGb3JFYWNoIH0gZnJvbSAnLi9oZWxwZXJzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVCYWNrQnV0dG9ucygpOiB2b2lkIHtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgcGFnZSB3YXNuJ3Qgb3BlbmVkIGluIGEgbmV3IHRhYiBvciBhIHN0YW5kYWxvbmUgd2luZG93XHJcbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPiAxKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhY2tMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZmgtYmFjay1saW5rXCIpO1xyXG4gICAgICAgIG5vZGVMaXN0Rm9yRWFjaChiYWNrTGlua3MsIChsaW5rOiBIVE1MQW5jaG9yRWxlbWVudCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGluay5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGhhbmRsZSB0aGUgYmFjayBidXR0b24gY2xpY2tcclxuICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gR28gYmFjayB0byB0aGUgcHJldmlvdXMgcGFnZSBpbiB0aGUgYnJvd3NlcidzIGhpc3RvcnlcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=\n","import { nodeListForEach } from './helpers';\nexport function initializeVisibilityToggles() {\n    const visibilityToggles = document.querySelectorAll(\"[data-toggle-visibility-id]\");\n    nodeListForEach(visibilityToggles, (toggle) => {\n        toggle.addEventListener('click', function handleClick(event) {\n            let toToggleId = toggle.getAttribute(\"data-toggle-visibility-id\");\n            if (toToggleId) {\n                let toToggle = document.getElementById(toToggleId);\n                if (toToggle) {\n                    if (toToggle.style.display === \"none\") {\n                        toToggle.style.display = \"block\";\n                    }\n                    else {\n                        toToggle.style.display = \"none\";\n                    }\n                }\n            }\n        });\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdmlzaWJpbGl0eS10b2dnbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUUzQyxNQUFNLFVBQVUsMkJBQTJCO0lBRXZDLE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDbkYsZUFBZSxDQUFDLGlCQUFpQixFQUM3QixDQUFDLE1BQW1CLEVBQUUsRUFBRTtRQUVwQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUMzQixTQUFTLFdBQVcsQ0FBQyxLQUFLO1lBRXRCLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUNsRSxJQUFJLFVBQVUsRUFBRTtnQkFDWixJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNuRCxJQUFJLFFBQVEsRUFBRTtvQkFDVixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTt3QkFDbkMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO3FCQUNwQzt5QkFBTTt3QkFDSCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7cUJBQ25DO2lCQUNKO2FBQ0o7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsImZpbGUiOiJjb21wb25lbnRzL3Zpc2liaWxpdHktdG9nZ2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9kZUxpc3RGb3JFYWNoIH0gZnJvbSAnLi9oZWxwZXJzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVWaXNpYmlsaXR5VG9nZ2xlcygpOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCB2aXNpYmlsaXR5VG9nZ2xlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS10b2dnbGUtdmlzaWJpbGl0eS1pZF1cIik7XHJcbiAgICBub2RlTGlzdEZvckVhY2godmlzaWJpbGl0eVRvZ2dsZXMsXHJcbiAgICAgICAgKHRvZ2dsZTogSFRNTEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9Ub2dnbGVJZCA9IHRvZ2dsZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvZ2dsZS12aXNpYmlsaXR5LWlkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b1RvZ2dsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b1RvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRvVG9nZ2xlSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9Ub2dnbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b1RvZ2dsZS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvVG9nZ2xlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvVG9nZ2xlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG59Il19\n","// js components were originally snaffled from https://github.com/alphagov/govuk-design-system/blob/main/src/javascripts/components/\nimport CookieBanner from './components/cookie-banner';\nimport CookiesPage from './components/cookies-page';\nimport initAnalytics from './components/analytics';\nimport { initializeBackButtons } from './components/back-links';\nimport { initializeVisibilityToggles } from './components/visibility-toggle';\n//todo: consistency in module/proto/class style\nwindow.FamilyHubsFrontend = window.FamilyHubsFrontend || {};\nwindow.FamilyHubsFrontend.initAll = () => {\n    // Initialise cookie banner\n    const $cookieBanner = document.querySelector('[data-module=\"govuk-cookie-banner\"]');\n    new CookieBanner($cookieBanner).init();\n    initAnalytics(window.GA_MEASUREMENT_ID);\n    //todo: move this into scripts section on cookie page\n    // Initialise cookie page\n    var $cookiesPage = document.querySelector('[data-module=\"fh-cookies-page\"]');\n    new CookiesPage($cookiesPage).init();\n    initializeBackButtons();\n    initializeVisibilityToggles();\n};\nwindow.GOVUKFrontend.initAll();\nwindow.MOJFrontend.initAll();\nwindow.FamilyHubsFrontend.initAll();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhbWlseWh1YnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0lBQW9JO0FBcUJwSSxPQUFPLFlBQVksTUFBTSw0QkFBNEIsQ0FBQTtBQUNyRCxPQUFPLFdBQVcsTUFBTSwyQkFBMkIsQ0FBQTtBQUNuRCxPQUFPLGFBQWEsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RSwrQ0FBK0M7QUFFL0MsTUFBTSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7QUFDNUQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7SUFFckMsMkJBQTJCO0lBQzNCLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMscUNBQXFDLENBQXVCLENBQUM7SUFDMUcsSUFBSSxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFdkMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXhDLHFEQUFxRDtJQUNyRCx5QkFBeUI7SUFDekIsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0lBQzdFLElBQUksV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXJDLHFCQUFxQixFQUFFLENBQUM7SUFDeEIsMkJBQTJCLEVBQUUsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDN0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDIiwiZmlsZSI6ImZhbWlseWh1YnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqcyBjb21wb25lbnRzIHdlcmUgb3JpZ2luYWxseSBzbmFmZmxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hbHBoYWdvdi9nb3Z1ay1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9zcmMvamF2YXNjcmlwdHMvY29tcG9uZW50cy9cclxuXHJcbi8vdG9kbzogc3dhcCB0byBhIGNvbXBvbmVudHMgZm9sZGVyP1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgR0RTX0NPTlNFTlRfQ09PS0lFX1ZFUlNJT046IG51bWJlcjtcclxuICAgICAgICBHQV9NRUFTVVJFTUVOVF9JRDogc3RyaW5nO1xyXG4gICAgICAgIEdBX0NPTlRBSU5FUl9JRDogc3RyaW5nO1xyXG4gICAgICAgIEdBX0NPT0tJRV9OQU1FOiBzdHJpbmc7XHJcbiAgICAgICAgZGF0YUxheWVyOiBhbnlbXTtcclxuICAgICAgICBGYW1pbHlIdWJzRnJvbnRlbmQ6IGFueTtcclxuICAgICAgICBHT1ZVS0Zyb250ZW5kOiB7XHJcbiAgICAgICAgICAgIGluaXRBbGw6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE1PSkZyb250ZW5kOiB7XHJcbiAgICAgICAgICAgIGluaXRBbGw6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5pbXBvcnQgQ29va2llQmFubmVyIGZyb20gJy4vY29tcG9uZW50cy9jb29raWUtYmFubmVyJ1xyXG5pbXBvcnQgQ29va2llc1BhZ2UgZnJvbSAnLi9jb21wb25lbnRzL2Nvb2tpZXMtcGFnZSdcclxuaW1wb3J0IGluaXRBbmFseXRpY3MgZnJvbSAnLi9jb21wb25lbnRzL2FuYWx5dGljcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVCYWNrQnV0dG9ucyB9IGZyb20gJy4vY29tcG9uZW50cy9iYWNrLWxpbmtzJztcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZVZpc2liaWxpdHlUb2dnbGVzIH0gZnJvbSAnLi9jb21wb25lbnRzL3Zpc2liaWxpdHktdG9nZ2xlJztcclxuXHJcbi8vdG9kbzogY29uc2lzdGVuY3kgaW4gbW9kdWxlL3Byb3RvL2NsYXNzIHN0eWxlXHJcblxyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kID0gd2luZG93LkZhbWlseUh1YnNGcm9udGVuZCB8fCB7fTtcclxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZC5pbml0QWxsID0gKCkgPT4ge1xyXG5cclxuICAgIC8vIEluaXRpYWxpc2UgY29va2llIGJhbm5lclxyXG4gICAgY29uc3QgJGNvb2tpZUJhbm5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1vZHVsZT1cImdvdnVrLWNvb2tpZS1iYW5uZXJcIl0nKSBhcyBIVE1MRWxlbWVudCB8IG51bGw7XHJcbiAgICBuZXcgQ29va2llQmFubmVyKCRjb29raWVCYW5uZXIpLmluaXQoKTtcclxuXHJcbiAgICBpbml0QW5hbHl0aWNzKHdpbmRvdy5HQV9NRUFTVVJFTUVOVF9JRCk7XHJcblxyXG4gICAgLy90b2RvOiBtb3ZlIHRoaXMgaW50byBzY3JpcHRzIHNlY3Rpb24gb24gY29va2llIHBhZ2VcclxuICAgIC8vIEluaXRpYWxpc2UgY29va2llIHBhZ2VcclxuICAgIHZhciAkY29va2llc1BhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tb2R1bGU9XCJmaC1jb29raWVzLXBhZ2VcIl0nKTtcclxuICAgIG5ldyBDb29raWVzUGFnZSgkY29va2llc1BhZ2UpLmluaXQoKTtcclxuXHJcbiAgICBpbml0aWFsaXplQmFja0J1dHRvbnMoKTtcclxuICAgIGluaXRpYWxpemVWaXNpYmlsaXR5VG9nZ2xlcygpO1xyXG59O1xyXG5cclxud2luZG93LkdPVlVLRnJvbnRlbmQuaW5pdEFsbCgpO1xyXG53aW5kb3cuTU9KRnJvbnRlbmQuaW5pdEFsbCgpO1xyXG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLmluaXRBbGwoKTtcclxuIl19\n"]}